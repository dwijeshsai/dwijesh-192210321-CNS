#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

void preprocess(char *message) {
    int i, j = 0;
    for (i = 0; message[i]; i++) {
        if (isalpha(message[i])) {
            message[j++] = toupper(message[i]);
        }
    }
    message[j] = '\0';
}

void generateMatrix(char key[], char matrix[SIZE][SIZE]) {
    char *ptr = key, *check;
    int i, j, k;
    check = (char *) calloc(26, sizeof(char));
    
    for (i = 0, k = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (*ptr == '\0') {
                for (k = 0; k < 26; k++) {
                    if (!check[k]) {
                        break;
                    }
                }
                if (k == 26) {
                    return; // return if all characters are already encountered
                }
                matrix[i][j] = k + 'A';
                check[k] = 1;
            } else {
                if (*ptr == 'J') {
                    ptr++;
                    continue;
                }
                if (!check[*ptr - 'A']) {
                    matrix[i][j] = *ptr;
                    check[*ptr - 'A'] = 1;
                } else {
                    j--;
                }
                ptr++;
            }
        }
    }
}

void findPosition(char matrix[SIZE][SIZE], char ch, int *row, int *col) {
    int i, j;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

void encrypt(char message[], char matrix[SIZE][SIZE]) {
    int len = strlen(message), i, row1, row2, col1, col2;
    char new_message[len * 2 + 1], ch1, ch2;
    for (i = 0; i < len; i += 2) {
        ch1 = message[i];
        ch2 = (i + 1 < len) ? message[i + 1] : 'X';
        if (ch1 == 'J') {
            ch1 = 'I';
        }
        if (ch2 == 'J') {
            ch2 = 'I';
        }
        if (ch1 == ch2) {
            ch2 = 'X';
            i--;
        }
        findPosition(matrix, ch1, &row1, &col1);
        findPosition(matrix, ch2, &row2, &col2);
        if (row1 == row2) {
            new_message[i] = matrix[row1][(col1 + 1) % SIZE];
            new_message[i + 1] = matrix[row2][(col2 + 1) % SIZE];
        } else if (col1 == col2) {
            new_message[i] = matrix[(row1 + 1) % SIZE][col1];
            new_message[i + 1] = matrix[(row2 + 1) % SIZE][col2];
        } else {
            new_message[i] = matrix[row1][col2];
            new_message[i + 1] = matrix[row2][col1];
        }
    }
    new_message[len * 2] = '\0';
    strcpy(message, new_message);
}
void decrypt(char message[], char matrix[SIZE][SIZE]) {
    int len = strlen(message), i, row1, row2, col1, col2;
    char new_message[len + 1];
    for (i = 0; i < len; i += 2) {
        findPosition(matrix, message[i], &row1, &col1);
        findPosition(matrix, message[i + 1], &row2, &col2);
        if (row1 == row2) {
            new_message[i] = matrix[row1][(col1 - 1 + SIZE) % SIZE];
            new_message[i + 1] = matrix[row2][(col2 - 1 + SIZE) % SIZE];
        } else if (col1 == col2) {
            new_message[i] = matrix[(row1 - 1 + SIZE) % SIZE][col1];
            new_message[i + 1] = matrix[(row2 - 1 + SIZE) % SIZE][col2];
        } else {
            new_message[i] = matrix[row1][col2];
            new_message[i + 1] = matrix[row2][col1];
        }
    }
    new_message[len] = '\0';
    strcpy(message, new_message);
}

int main() {
    char key[25], message[100];
    char matrix[SIZE][SIZE];
    
    printf("Enter the key: ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = '\0';
    
    printf("Enter the message to encrypt: ");
    fgets(message, sizeof(message), stdin);
    message[strcspn(message, "\n")] = '\0';
    
    preprocess(message);
    generateMatrix(key, matrix);
    
    printf("Original message: %s\n", message);
    
    encrypt(message, matrix);
    printf("Encrypted message: %s\n", message);
    
    decrypt(message, matrix);
    printf("Decrypted message: %s\n", message);
    
    return 0;
}
